{
  "compilerOptions": {
    "outDir": "./dist/",
    // Подсвечивает все места где не указан тип
    // Однако это не означает, что теперь вовсе нельзя использовать any.
    // Это означает лишь, что в подобных ситуация разработчик должен явно писать any,
    "noImplicitAny": true,
    // Модульная спецификация (импорты, экспорты). esnext необходим для code splitting
    "module": "esnext",
    // В какую спецификацию компилируем: для поддержки большинства браузеров
    "target": "es5",

    // избавляет от необходимости везде импортировать React где используется JSX
    "jsx": "react-jsx",

    // Компилятор будет обрабатывать не только TS файлы, но и JS файлы
    "allowJs": true,
    "moduleResolution": "node",
    // Для абсолютного импорта
    "baseUrl": ".",
    // для использования абсолютных путей
    "paths": {
      "*": ["./src/*"]
    },
    // esModuleInterop позволяет работать с пакетами, которые используют CommonJS (require(), module.exports),
    // как с обычными пакетами с помощью import. Прим. import Moment from 'moment';
    // console.log(Moment); - без флага esModuleInterop результат undefined
    // console.log(Moment); - c флагом результат [object Object]
    "esModuleInterop": true,

    // Если какая-либо библиотека не имеет default import,
    // лоадеры вроде ts-loader или babel-loader автоматически создают их
    // import * as React from 'react'; - вместо такого импорта
    // import React from 'react'; - можно писать такой
    "allowSyntheticDefaultImports": true
  },
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  }
}